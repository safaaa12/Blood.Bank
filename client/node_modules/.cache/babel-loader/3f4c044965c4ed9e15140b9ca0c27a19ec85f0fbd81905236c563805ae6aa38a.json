{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05D0\\u05E1\\u05E8\\u05D0\\u05D0 \\u05D0\\u05DC\\u05D2\\u05E8\\u05D2\\u05D0\\u05D5\\u05D9\\\\OneDrive\\\\Desktop\\\\\\u05E9\\u05E0\\u05D4 \\u05D3\\\\\\u05E1\\u05DE\\u05E1\\u05D8\\u05E8 \\u05D1\\\\\\u05D1\\u05D9\\u05D5 \\u05E8\\u05D5\\u05E4\\u05D0\\u05D9\\u05EA\\\\Blood.Bank\\\\client\\\\src\\\\components\\\\ResearchDataPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResearchDataPage = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // Fetch the data from the API\n    fetch('/api/blood/stats').then(response => response.json()).then(result => {\n      console.log(result); // Check what you're receiving\n      setData(result.bloodTypeCounts || []); // Ensure it's an array or set to empty\n    }).catch(error => {\n      console.error(\"Error fetching research data:\", error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Research Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), data.length > 0 ? data.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Blood Type: \", item._id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Count: \", item.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 25\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n_s(ResearchDataPage, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = ResearchDataPage;\nexport default ResearchDataPage;\nvar _c;\n$RefreshReg$(_c, \"ResearchDataPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ResearchDataPage","_s","data","setData","fetch","then","response","json","result","console","log","bloodTypeCounts","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","item","index","_id","count","_c","$RefreshReg$"],"sources":["C:/Users/אסראא אלגרגאוי/OneDrive/Desktop/שנה ד/סמסטר ב/ביו רופאית/Blood.Bank/client/src/components/ResearchDataPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ResearchDataPage = () => {\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Fetch the data from the API\r\n        fetch('/api/blood/stats')\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                console.log(result); // Check what you're receiving\r\n                setData(result.bloodTypeCounts || []); // Ensure it's an array or set to empty\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching research data:\", error);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Research Data</h1>\r\n            {data.length > 0 ? (\r\n                data.map((item, index) => (\r\n                    <div key={index}>\r\n                        <p>Blood Type: {item._id}</p>\r\n                        <p>Count: {item.count}</p>\r\n                    </div>\r\n                ))\r\n            ) : (\r\n                <p>No data available</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResearchDataPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACZ;IACAQ,KAAK,CAAC,kBAAkB,CAAC,CACpBC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,MAAM,IAAI;MACZC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC,CAAC,CAAC;MACrBL,OAAO,CAACK,MAAM,CAACG,eAAe,IAAI,EAAE,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZJ,OAAO,CAACI,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACzD,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,oBACId,OAAA;IAAAe,QAAA,gBACIf,OAAA;MAAAe,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBhB,IAAI,CAACiB,MAAM,GAAG,CAAC,GACZjB,IAAI,CAACkB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACjBvB,OAAA;MAAAe,QAAA,gBACIf,OAAA;QAAAe,QAAA,GAAG,cAAY,EAACO,IAAI,CAACE,GAAG;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7BnB,OAAA;QAAAe,QAAA,GAAG,SAAO,EAACO,IAAI,CAACG,KAAK;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAFpBI,KAAK;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACR,CAAC,gBAEFnB,OAAA;MAAAe,QAAA,EAAG;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC1B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACjB,EAAA,CA/BID,gBAAgB;AAAAyB,EAAA,GAAhBzB,gBAAgB;AAiCtB,eAAeA,gBAAgB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}