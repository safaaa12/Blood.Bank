{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05D0\\u05E1\\u05E8\\u05D0\\u05D0 \\u05D0\\u05DC\\u05D2\\u05E8\\u05D2\\u05D0\\u05D5\\u05D9\\\\OneDrive\\\\Desktop\\\\\\u05E9\\u05E0\\u05D4 \\u05D3\\\\\\u05E1\\u05DE\\u05E1\\u05D8\\u05E8 \\u05D1\\\\\\u05D1\\u05D9\\u05D5 \\u05E8\\u05D5\\u05E4\\u05D0\\u05D9\\u05EA\\\\Blood.Bank\\\\client\\\\src\\\\components\\\\ResearchDataPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto'; // Required for Chart.js v3 or later\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bloodTypes = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];\nconst BloodTypeChart = () => {\n  _s();\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Fetch the data from the API\n    fetch('/api/blood/stats').then(response => response.json()).then(result => {\n      const bloodTypeCounts = bloodTypes.map(type => ({\n        type,\n        count: 0 // default to 0\n      }));\n      if (result && result.bloodTypeCounts) {\n        result.bloodTypeCounts.forEach(item => {\n          const index = bloodTypes.indexOf(item._id);\n          if (index !== -1) {\n            bloodTypeCounts[index].count = item.count;\n          }\n        });\n      }\n      setData({\n        labels: bloodTypeCounts.map(item => item.type),\n        datasets: [{\n          label: 'Blood Type Count',\n          data: bloodTypeCounts.map(item => item.count),\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      });\n      setLoading(false);\n    }).catch(err => {\n      console.error(\"Error fetching research data:\", err);\n      setError(\"Error fetching research data\");\n      setLoading(false);\n    });\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Blood Type Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: data,\n      options: {\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Blood Types'\n            }\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'Count'\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(BloodTypeChart, \"7bLVVSqSxcNiDhnRDgCFqCJMUhs=\");\n_c = BloodTypeChart;\nexport default BloodTypeChart;\nvar _c;\n$RefreshReg$(_c, \"BloodTypeChart\");","map":{"version":3,"names":["React","useEffect","useState","Bar","jsxDEV","_jsxDEV","bloodTypes","BloodTypeChart","_s","data","setData","loading","setLoading","error","setError","fetch","then","response","json","result","bloodTypeCounts","map","type","count","forEach","item","index","indexOf","_id","labels","datasets","label","backgroundColor","borderColor","borderWidth","catch","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","options","scales","x","title","display","text","y","beginAtZero","_c","$RefreshReg$"],"sources":["C:/Users/אסראא אלגרגאוי/OneDrive/Desktop/שנה ד/סמסטר ב/ביו רופאית/Blood.Bank/client/src/components/ResearchDataPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport 'chart.js/auto';  // Required for Chart.js v3 or later\r\n\r\nconst bloodTypes = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];\r\n\r\nconst BloodTypeChart = () => {\r\n  const [data, setData] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch the data from the API\r\n    fetch('/api/blood/stats')\r\n      .then(response => response.json())\r\n      .then(result => {\r\n        const bloodTypeCounts = bloodTypes.map(type => ({\r\n          type,\r\n          count: 0, // default to 0\r\n        }));\r\n\r\n        if (result && result.bloodTypeCounts) {\r\n          result.bloodTypeCounts.forEach(item => {\r\n            const index = bloodTypes.indexOf(item._id);\r\n            if (index !== -1) {\r\n              bloodTypeCounts[index].count = item.count;\r\n            }\r\n          });\r\n        }\r\n\r\n        setData({\r\n          labels: bloodTypeCounts.map(item => item.type),\r\n          datasets: [\r\n            {\r\n              label: 'Blood Type Count',\r\n              data: bloodTypeCounts.map(item => item.count),\r\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n              borderColor: 'rgba(75, 192, 192, 1)',\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        });\r\n        setLoading(false);\r\n      })\r\n      .catch(err => {\r\n        console.error(\"Error fetching research data:\", err);\r\n        setError(\"Error fetching research data\");\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>{error}</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <h2>Blood Type Statistics</h2>\r\n      <Bar \r\n        data={data}\r\n        options={{\r\n          scales: {\r\n            x: {\r\n              title: {\r\n                display: true,\r\n                text: 'Blood Types',\r\n              },\r\n            },\r\n            y: {\r\n              beginAtZero: true,\r\n              title: {\r\n                display: true,\r\n                text: 'Count',\r\n              },\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BloodTypeChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}