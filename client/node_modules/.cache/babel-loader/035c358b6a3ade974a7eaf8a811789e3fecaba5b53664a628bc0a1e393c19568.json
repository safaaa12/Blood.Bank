{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05D0\\u05E1\\u05E8\\u05D0\\u05D0 \\u05D0\\u05DC\\u05D2\\u05E8\\u05D2\\u05D0\\u05D5\\u05D9\\\\OneDrive\\\\Desktop\\\\\\u05E9\\u05E0\\u05D4 \\u05D3\\\\\\u05E1\\u05DE\\u05E1\\u05D8\\u05E8 \\u05D1\\\\\\u05D1\\u05D9\\u05D5 \\u05E8\\u05D5\\u05E4\\u05D0\\u05D9\\u05EA\\\\Blood.Bank\\\\client\\\\src\\\\components\\\\ResearchDataPage.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n\n// const bloodTypes = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];\n\n// const ResearchDataPage = () => {\n//   const [data, setData] = useState({}); // Use an object to store blood type counts\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     // Fetch the data from the API\n//     fetch('/api/blood/stats')\n//       .then(response => response.json())\n//       .then(result => {\n//         if (result && result.bloodTypeCounts) {\n//           const bloodTypeCounts = {};\n\n//           // Initialize all blood types with count 0\n//           bloodTypes.forEach(type => {\n//             bloodTypeCounts[type] = 0;\n//           });\n\n//           // Update with actual counts from the server\n//           result.bloodTypeCounts.forEach(item => {\n//             if (bloodTypeCounts[item._id] !== undefined) {\n//               bloodTypeCounts[item._id] = item.count;\n//             }\n//           });\n\n//           setData(bloodTypeCounts); // Set the updated data\n//         }\n//         setLoading(false);\n//       })\n//       .catch(err => {\n//         console.error(\"Error fetching research data:\", err);\n//         setError(\"Error fetching research data\");\n//         setLoading(false);\n//       });\n//   }, []);\n\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   return (\n//     <div>\n//       <h1>Blood Type Statistics</h1>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Blood Type</th>\n//             <th>Count</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {bloodTypes.map((type) => (\n//             <tr key={type}>\n//               <td>{type}</td>\n//               <td>{data[type]}</td> {/* Display the count for each blood type */}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default ResearchDataPage;\nimport React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto'; // Automatically register the required Chart.js components\nimport './ResearchDataPage.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bloodTypes = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];\nconst ResearchDataPage = () => {\n  _s();\n  const [data, setData] = useState({}); // Use an object to store blood type counts\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Fetch the data from the API\n    fetch('/api/blood/stats').then(response => response.json()).then(result => {\n      if (result && result.bloodTypeCounts) {\n        const bloodTypeCounts = {};\n\n        // Initialize all blood types with count 0\n        bloodTypes.forEach(type => {\n          bloodTypeCounts[type] = 0;\n        });\n\n        // Update with actual counts from the server\n        result.bloodTypeCounts.forEach(item => {\n          if (bloodTypeCounts[item._id] !== undefined) {\n            bloodTypeCounts[item._id] = item.count;\n          }\n        });\n        setData(bloodTypeCounts); // Set the updated data\n      }\n      setLoading(false);\n    }).catch(err => {\n      console.error(\"Error fetching research data:\", err);\n      setError(\"Error fetching research data\");\n      setLoading(false);\n    });\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Prepare chart data\n  const chartData = {\n    labels: bloodTypes,\n    datasets: [{\n      label: 'Blood Type Count',\n      data: bloodTypes.map(type => data[type] || 0),\n      // Use actual data or 0 if undefined\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      borderColor: 'rgba(75, 192, 192, 1)',\n      borderWidth: 1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Blood Type Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Blood Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Count\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: bloodTypes.map(type => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data[type]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this), \" \"]\n        }, type, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '600px',\n        height: '400px',\n        marginTop: '50px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: context => `${context.label}: ${context.raw}`\n              }\n            }\n          },\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Blood Types'\n              }\n            },\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Count'\n              }\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(ResearchDataPage, \"7bLVVSqSxcNiDhnRDgCFqCJMUhs=\");\n_c = ResearchDataPage;\nexport default ResearchDataPage;\nvar _c;\n$RefreshReg$(_c, \"ResearchDataPage\");","map":{"version":3,"names":["React","useEffect","useState","Bar","jsxDEV","_jsxDEV","bloodTypes","ResearchDataPage","_s","data","setData","loading","setLoading","error","setError","fetch","then","response","json","result","bloodTypeCounts","forEach","type","item","_id","undefined","count","catch","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","chartData","labels","datasets","label","map","backgroundColor","borderColor","borderWidth","style","width","height","marginTop","options","responsive","plugins","legend","position","tooltip","callbacks","context","raw","scales","x","title","display","text","y","beginAtZero","_c","$RefreshReg$"],"sources":["C:/Users/אסראא אלגרגאוי/OneDrive/Desktop/שנה ד/סמסטר ב/ביו רופאית/Blood.Bank/client/src/components/ResearchDataPage.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n\r\n// const bloodTypes = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];\r\n\r\n// const ResearchDataPage = () => {\r\n//   const [data, setData] = useState({}); // Use an object to store blood type counts\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch the data from the API\r\n//     fetch('/api/blood/stats')\r\n//       .then(response => response.json())\r\n//       .then(result => {\r\n//         if (result && result.bloodTypeCounts) {\r\n//           const bloodTypeCounts = {};\r\n\r\n//           // Initialize all blood types with count 0\r\n//           bloodTypes.forEach(type => {\r\n//             bloodTypeCounts[type] = 0;\r\n//           });\r\n\r\n//           // Update with actual counts from the server\r\n//           result.bloodTypeCounts.forEach(item => {\r\n//             if (bloodTypeCounts[item._id] !== undefined) {\r\n//               bloodTypeCounts[item._id] = item.count;\r\n//             }\r\n//           });\r\n\r\n//           setData(bloodTypeCounts); // Set the updated data\r\n//         }\r\n//         setLoading(false);\r\n//       })\r\n//       .catch(err => {\r\n//         console.error(\"Error fetching research data:\", err);\r\n//         setError(\"Error fetching research data\");\r\n//         setLoading(false);\r\n//       });\r\n//   }, []);\r\n\r\n//   if (loading) {\r\n//     return <p>Loading...</p>;\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <p>{error}</p>;\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Blood Type Statistics</h1>\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Blood Type</th>\r\n//             <th>Count</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {bloodTypes.map((type) => (\r\n//             <tr key={type}>\r\n//               <td>{type}</td>\r\n//               <td>{data[type]}</td> {/* Display the count for each blood type */}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ResearchDataPage;\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport 'chart.js/auto';  // Automatically register the required Chart.js components\r\nimport './ResearchDataPage.css'; // Import the CSS file\r\n\r\nconst bloodTypes = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];\r\n\r\nconst ResearchDataPage = () => {\r\n  const [data, setData] = useState({}); // Use an object to store blood type counts\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch the data from the API\r\n    fetch('/api/blood/stats')\r\n      .then(response => response.json())\r\n      .then(result => {\r\n        if (result && result.bloodTypeCounts) {\r\n          const bloodTypeCounts = {};\r\n\r\n          // Initialize all blood types with count 0\r\n          bloodTypes.forEach(type => {\r\n            bloodTypeCounts[type] = 0;\r\n          });\r\n\r\n          // Update with actual counts from the server\r\n          result.bloodTypeCounts.forEach(item => {\r\n            if (bloodTypeCounts[item._id] !== undefined) {\r\n              bloodTypeCounts[item._id] = item.count;\r\n            }\r\n          });\r\n\r\n          setData(bloodTypeCounts); // Set the updated data\r\n        }\r\n        setLoading(false);\r\n      })\r\n      .catch(err => {\r\n        console.error(\"Error fetching research data:\", err);\r\n        setError(\"Error fetching research data\");\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>{error}</p>;\r\n  }\r\n\r\n  // Prepare chart data\r\n  const chartData = {\r\n    labels: bloodTypes,\r\n    datasets: [{\r\n      label: 'Blood Type Count',\r\n      data: bloodTypes.map(type => data[type] || 0), // Use actual data or 0 if undefined\r\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n      borderColor: 'rgba(75, 192, 192, 1)',\r\n      borderWidth: 1,\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Blood Type Statistics</h1>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Blood Type</th>\r\n            <th>Count</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {bloodTypes.map((type) => (\r\n            <tr key={type}>\r\n              <td>{type}</td>\r\n              <td>{data[type]}</td> {/* Display the count for each blood type */}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <div style={{ width: '600px', height: '400px', marginTop: '50px' }}>\r\n        <Bar data={chartData} options={{\r\n          responsive: true,\r\n          plugins: {\r\n            legend: {\r\n              position: 'top',\r\n            },\r\n            tooltip: {\r\n              callbacks: {\r\n                label: (context) => `${context.label}: ${context.raw}`,\r\n              },\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              title: {\r\n                display: true,\r\n                text: 'Blood Types',\r\n              },\r\n            },\r\n            y: {\r\n              beginAtZero: true,\r\n              title: {\r\n                display: true,\r\n                text: 'Count',\r\n              },\r\n            },\r\n          },\r\n        }} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResearchDataPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}